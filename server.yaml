AWSTemplateFormatVersion: "2010-09-09"

Description: this is create vpc with subnets

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
       CidrBlock: 192.168.56.0/24
       EnableDnsHostnames: true
       EnableDnsSupport: true
       InstanceTenancy: default
       Tags: 
          - Key: Name
            Value: Test VPC

  InternetGetWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
       - Key: Name
         Value: Test IGW

  InternetGetWayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGetWay
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.56.0/28
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.56.16/28
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC

  Subnet1Association:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2Association:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
      
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: InternetGetWay

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: SG to test ping
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Security Group
  
  MyEC2Instance1: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0fc5d935ebf8bc3bc"
      KeyName: "N.VIRGINIAKEYPAIR"
      InstanceType: "t2.micro"
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "SecurityGroup"
        SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install -y apache2
          sudo systemctl enable --now apache2
          echo "<h1> Hey Pintu! Your Server One Is Live</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: Instance-1
  
  MyEC2Instance2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0fc5d935ebf8bc3bc"
      KeyName: "N.VIRGINIAKEYPAIR"
      InstanceType: "t2.micro"
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "SecurityGroup"
        SubnetId: !Ref PublicSubnet2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install -y apache2
          sudo systemctl enable --now apache2
          echo "<h1> Hey Pintu! Your Server Two Is Live</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: Instance-2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Protocol: HTTP
      Port: 80
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        - Key: stickiness.enabled   # Enable stickiness
          Value: 'true'

      VpcId: !Ref VPC
      TargetType: instance
      LoadBalancerArns:
        - !Ref MyNLB
      Targets:
        - Id: !Ref MyEC2Instance1
        - Id: !Ref MyEC2Instance2
      Matcher:
           HttpCode: 200,302
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10  # The interval between health checks
      HealthCheckPath: / # The path on the target for health checks
      HealthCheckPort: 80  # The port to use for health checks
      HealthCheckProtocol: HTTP  # The protocol to use for health checks (HTTP or HTTPS)
      HealthCheckTimeoutSeconds: 5  # The amount of time to wait for a response
      HealthyThresholdCount: 3  # The number of consecutive successful health checks required
      UnhealthyThresholdCount: 5

  ListenerRuleWithStickiness:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /  # Specify your path pattern
      ListenerArn: !Ref Listener
      Priority: 1  # Adjust the priority as needed

  MyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      SecurityGroups: 
        - !Ref SecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Scheme: internet-facing

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref MyNLB
      Port: '80'
      Protocol: HTTP