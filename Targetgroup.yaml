AWSTemplateFormatVersion: '2010-09-09'
Description: Create an Application Load Balancer and Target Group

Resources: 
  Listener2:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      LoadBalancerArn: !ImportValue LBArn 
      Port: 81
      Protocol: HTTP  
  
  TargetGroup2:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: MyTargetGroup2
        Protocol: HTTP
        Port: 80
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: '20'
          - Key: stickiness.enabled   # Enable stickiness
            Value: 'true'
        VpcId: 
          Fn::ImportValue: !Sub VPCId
        TargetType: instance
        LoadBalancerArns:
          - !ImportValue ListnerArn
        Targets:
          - Id: !Ref MyEC2Instance3
          - Id: !Ref MyEC2Instance4
        Matcher:
            HttpCode: 200,302
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 10  # The interval between health checks
        HealthCheckPath: / # The path on the target for health checks
        HealthCheckPort: 80  # The port to use for health checks
        HealthCheckProtocol: HTTP  # The protocol to use for health checks (HTTP or HTTPS)
        HealthCheckTimeoutSeconds: 5  # The amount of time to wait for a response
        HealthyThresholdCount: 3  # The number of consecutive successful health checks required
        UnhealthyThresholdCount: 5

  ListenerRuleWithStickiness:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: path-pattern
          Values:
            - /  # Specify your path pattern
      ListenerArn: !Ref Listener2
      Priority: 1  # Adjust the priority as needed      

  MyEC2Instance3: 
      Type: AWS::EC2::Instance
      Properties: 
        ImageId: "ami-0fc5d935ebf8bc3bc"
        KeyName: "N.VIRGINIAKEYPAIR"
        InstanceType: "t2.micro"
        NetworkInterfaces: 
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet: 
              - !ImportValue SGId
            SubnetId: 
              Fn::ImportValue: !Sub Subnet1
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install -y apache2
            sudo systemctl enable --now apache2
            echo "<h1> WelComeTo Hell three</h1>" > /var/www/html/index.html
        Tags:
          - Key: Name
            Value: Instance-3
  
  MyEC2Instance4: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0fc5d935ebf8bc3bc"
      KeyName: "N.VIRGINIAKEYPAIR"
      InstanceType: "t2.micro"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !ImportValue SGId
          SubnetId: 
            Fn::ImportValue: !Sub Subnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install -y apache2
          sudo systemctl enable --now apache2
          echo "<h1> WelComeTo Hell four</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: Instance-4      